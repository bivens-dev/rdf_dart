import 'package:rdf_dart/rdf_dart.dart';
import 'package:test/test.dart';
import 'package:uuid/uuid.dart';

void main() {
  group('BlankNode', () {
    group('Creation', () {
      test('without ID', () {
        final blankNode = BlankNode();
        expect(blankNode.id, isNotEmpty);
        expect(Uuid.isValidUUID(fromString: blankNode.id), true);
      });

      test('with custom ID', () {
        const customId = 'myCustomId';
        final blankNode = BlankNode(customId);
        expect(blankNode.id, customId);
      });
    });

    group('Type checking', () {
      test('isIRI is false', () {
        final blankNode = BlankNode();
        expect(blankNode.isIRI, false);
      });

      test('isBlankNode is true', () {
        final blankNode = BlankNode();
        expect(blankNode.isBlankNode, true);
      });

      test('isLiteral is false', () {
        final blankNode = BlankNode();
        expect(blankNode.isLiteral, false);
      });
    });

    group('TermType', () {
      test('termType is blankNode', () {
        final blankNode = BlankNode();
        expect(blankNode.termType, TermType.blankNode);
      });
    });

    group('toString', () {
      test('returns correct string representation', () {
        final blankNode = BlankNode('someId');
        expect(blankNode.toString(), '_:someId');
      });
    });

    group('Equality', () {
      test('equal blank nodes with same id', () {
        const id = 'sameId';
        final blankNode1 = BlankNode(id);
        final blankNode2 = BlankNode(id);
        expect(blankNode1 == blankNode2, true);
      });

      test('different blank nodes with different ids', () {
        final blankNode1 = BlankNode('id1');
        final blankNode2 = BlankNode('id2');
        expect(blankNode1 == blankNode2, false);
      });

      test('different blank nodes with autogenerated ids', () {
        final blankNode1 = BlankNode();
        final blankNode2 = BlankNode();
        expect(blankNode1 == blankNode2, false);
      });
    });

    group('HashCode', () {
      test('equal blank nodes with same id have same hashCode', () {
        const id = 'sameId';
        final blankNode1 = BlankNode(id);
        final blankNode2 = BlankNode(id);
        expect(blankNode1.hashCode == blankNode2.hashCode, true);
      });

      test('different blank nodes with different ids have different hashCodes', () {
        final blankNode1 = BlankNode('id1');
        final blankNode2 = BlankNode('id2');
        expect(blankNode1.hashCode == blankNode2.hashCode, false);
      });

      test('different blank nodes with autogenerated ids have different hashCodes', () {
        final blankNode1 = BlankNode();
        final blankNode2 = BlankNode();
        expect(blankNode1.hashCode == blankNode2.hashCode, false);
      });
    });
  });
}
