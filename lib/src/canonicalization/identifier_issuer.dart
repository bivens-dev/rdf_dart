import 'dart:collection';

/// Issues unique identifiers based on a prefix and a counter, tracking
/// previously issued identifiers for existing blank node labels.
///
/// Corresponds to the "Blank Node Identifier Issuer State" defined in the
/// RDF Dataset Canonicalization specification (Section 4.3).
class IdentifierIssuer {
  /// The prefix used for generating new identifiers (e.g., "c14n", "b").
  final String _prefix;

  /// The counter appended to the prefix. Initialized to 0.
  int _counter = 0;

  /// An ordered map relating existing blank node identifiers (keys) to
  /// the newly issued identifiers (values) generated by this issuer.
  /// Dart's default Map (LinkedHashMap) maintains insertion order.
  final Map<String, String> _issuedIdentifiers = <String, String>{};

  /// Creates an issuer with the given identifier [prefix].
  IdentifierIssuer(this._prefix);

  /// Gets the issued identifier for the given [existingIdentifier].
  ///
  /// If an identifier has already been issued for [existingIdentifier],
  /// it returns the previously issued identifier.
  ///
  /// Otherwise, it generates a new identifier using the prefix and counter,
  /// stores the mapping, increments the counter, and returns the new identifier.
  ///
  /// Parameters:
  ///   [existingIdentifier]: The input or temporary blank node identifier
  ///                         (e.g., "b0", "b1", or an original UUID/label).
  ///
  /// Returns:
  ///   The issued identifier associated with [existingIdentifier] within the
  ///   scope of this issuer (e.g., "c14n0", "b0").
  String getId(String existingIdentifier) {
    // Check if an identifier has already been issued for this existing one.
    if (_issuedIdentifiers.containsKey(existingIdentifier)) {
      return _issuedIdentifiers[existingIdentifier]!;
    }

    // Issue a new identifier.
    final issuedId = '$_prefix$_counter';
    _issuedIdentifiers[existingIdentifier] = issuedId;
    _counter++;
    return issuedId;
  }

  /// Returns the map of issued identifiers (existing -> new).
  /// Useful for debugging or specific algorithm steps.
  Map<String, String> get issued => UnmodifiableMapView(_issuedIdentifiers);

  /// Returns the current counter value.
  int get counter => _counter;

  /// Returns the prefix used by this issuer.
  String get prefix => _prefix;

  /// Creates a deep copy of this IdentifierIssuer instance.
  ///
  /// The copy will have the same prefix, the same current counter value,
  /// and a separate copy of the issued identifiers map, preserving the
  /// original's issuance order.
  IdentifierIssuer deepCopy() {
    final copy = IdentifierIssuer(_prefix);
    copy._counter = _counter;
    // Create a new LinkedHashMap from the existing one to ensure independence
    copy._issuedIdentifiers.addAll(LinkedHashMap<String, String>.from(_issuedIdentifiers));
    return copy;
  }
}